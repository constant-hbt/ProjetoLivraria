/*
TODO
Fazer com que a tabela de midias atualize conforme vou adcioonando ou reovendo os produtos

 */
package view;

import data.CompraData;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.CompraModel;
import model.ItensCompraModel;
import model.MidiaModel;

/**
 *
 * @author Henrique Borges
 */
public class jifHistorico extends javax.swing.JInternalFrame {

    /**
     * Creates new form jifHistorico
     */
    private ArrayList<CompraModel> listaCompras;
    private ArrayList<String> nome_vendedores;
    private CompraModel obj;
    private ArrayList<ItensCompraModel> itens;
    private ArrayList<ItensCompraModel> itens_removidos;
    private ArrayList<ItensCompraModel> itens_inicial;
    private int idCliente;
    private int idFunc;
    private int idCompra;
    boolean locked;
    public jifHistorico() {
        initComponents();
        obj = new CompraModel();
        iniciarTela();
        listaCompras = new ArrayList<>();
        nome_vendedores = new ArrayList<>();
        itens_removidos = new ArrayList<>();
        itens_inicial = new ArrayList<>();
        itens = new ArrayList<>();
        idCliente = 0;
        idFunc = 0;
        idCompra = 0;
        locked = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtHistorico = new javax.swing.JTable();
        jbEditar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtItensCompra = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtTabMidias = new javax.swing.JTable();
        jlQuant = new javax.swing.JLabel();
        jtfQuant = new javax.swing.JTextField();
        jbAdicionar = new javax.swing.JButton();
        jbRemover = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jlPesq = new javax.swing.JLabel();
        jtfPesq = new javax.swing.JTextField();
        jcbFormapag = new javax.swing.JComboBox<>();
        jlFormapag = new javax.swing.JLabel();
        jlValort = new javax.swing.JLabel();
        jlValorParcial = new javax.swing.JLabel();
        jbVoltar = new javax.swing.JButton();
        jlValortp = new javax.swing.JLabel();
        jlValorTotal = new javax.swing.JLabel();
        Desconto = new javax.swing.JLabel();
        jtfDesconto = new javax.swing.JTextField();

        jtHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID da compra", "ID/Nome vendedor", "Data e Hora", "Desconto", "Valor Total", "Forma de pagamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtHistorico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtHistoricoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtHistorico);

        jbEditar.setText("EDITAR");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbExcluir.setText("EXCLUIR");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbSalvar.setText("SALVAR");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jtItensCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID da mídia", "Título", "Quantidade", "Preço unitário", "Valor parcial"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtItensCompra);

        jtTabMidias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Título", "Quantidade disponível", "Preço unitário"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtTabMidias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTabMidiasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtTabMidias);

        jlQuant.setText("Quantidade");

        jbAdicionar.setText("+");
        jbAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarActionPerformed(evt);
            }
        });

        jbRemover.setText("-");
        jbRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverActionPerformed(evt);
            }
        });

        jbCancelar.setText("CANCELAR");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jlPesq.setText("Pesquisar");

        jtfPesq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesqKeyReleased(evt);
            }
        });

        jcbFormapag.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jcbFormapag.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Dinheiro", "Cartão de Crédito", "Cartão de Débito" }));
        jcbFormapag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFormapagActionPerformed(evt);
            }
        });

        jlFormapag.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlFormapag.setText("Forma de pagamento");

        jlValort.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jlValort.setText("Valor Total");

        jlValorParcial.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jlValorParcial.setText("0,00");

        jbVoltar.setText("VOLTAR");
        jbVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVoltarActionPerformed(evt);
            }
        });

        jlValortp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlValortp.setText("Valor Total Parcial");

        jlValorTotal.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jlValorTotal.setText("0,00");

        Desconto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Desconto.setText("Desconto");

        jtfDesconto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfDescontoMouseClicked(evt);
            }
        });
        jtfDesconto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfDescontoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlPesq)
                .addGap(18, 18, 18)
                .addComponent(jtfPesq, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(210, 210, 210))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jlValortp)
                                .addGap(18, 18, 18)
                                .addComponent(jlValorParcial, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Desconto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlFormapag)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbFormapag, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jlValort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jlValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 16, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jlQuant)
                        .addGap(10, 10, 10)
                        .addComponent(jtfQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jbRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 135, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPesq)
                    .addComponent(jtfPesq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlFormapag)
                                .addComponent(jcbFormapag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlValorParcial, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jlValortp)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jtfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Desconto)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jlValort)
                                    .addComponent(jlValorTotal)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jlQuant))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jtfQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jbAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtHistoricoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtHistoricoMouseClicked
        try{
            int linha = jtHistorico.getSelectedRow();
            DefaultTableModel tabela = (DefaultTableModel) jtItensCompra.getModel();
            ArrayList<String> titulos = new ArrayList();
            CompraData DAO = new CompraData();
            if(linha > -1){
                if(!locked){
                    locked = true;
                    while(jtItensCompra.getRowCount() != 0)
                        tabela.removeRow(0);
                    this.idCompra = Integer.parseInt((String)jtHistorico.getValueAt(linha, 0));
                    itens = DAO.pesqItensCompra(idCompra);
                    itens_inicial = itens;
                    titulos = DAO.pesqTitulos(idCompra);
                    for(int i=0; i<itens.size(); i++){
                        tabela.addRow(new String[]{"" + itens.get(i).getIdMidia(),
                                titulos.get(i), "" + itens.get(i).getQuant(), 
                                "" + itens.get(i).getPreco(), "" + itens.get(i).getValorparcial()});
                    }
                    jlValorParcial.setText("" + (Double.parseDouble((String) jtHistorico.getValueAt(linha, 4)) + Double.parseDouble((String) jtHistorico.getValueAt(linha, 3))));
                    jlValorTotal.setText("" + Double.parseDouble((String) jtHistorico.getValueAt(linha, 4)));
                    jtfDesconto.setText("" + Double.parseDouble((String) jtHistorico.getValueAt(linha, 3)));
                    jcbFormapag.setSelectedItem((String) jtHistorico.getValueAt(linha, 5));
                    jbEditar.setEnabled(true);
                    jbExcluir.setEnabled(true);
                    jtfPesq.setEnabled(true);
                    jbRemover.setEnabled(true);
                }
                else{
                    if(JOptionPane.showConfirmDialog(this, "Deseja realmente ver outra compra?\n"
                    + "Todas as alterações que não foram salvas serão perdidas!",  
                    "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                        if(itens_removidos.size() > 0)
                            for(int i=itens_removidos.size() - 1; i>=0; i--)
                                itens_removidos.remove(i);
                        limparCampos();
                        limparTabelas();
                        iniciarTela();
                        locked = false;
                        jtHistoricoMouseClicked(evt);
                    }
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jtHistoricoMouseClicked

    private void jtfPesqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesqKeyReleased
        try{
            String pesq = jtfPesq.getText();
            DefaultTableModel tabela = (DefaultTableModel) jtTabMidias.getModel();
            while(jtTabMidias.getRowCount() > 0)
                    tabela.removeRow(0);
            if(pesq.length() > 2){
                ArrayList<MidiaModel> listaMidias = new ArrayList<>();
                CompraData DAO = new CompraData();
                listaMidias = DAO.pesquisarMid(pesq);
                for(int i=0; i<listaMidias.size(); i++){
                            tabela.addRow(new String[]{"" + listaMidias.get(i).getId(), 
                                listaMidias.get(i).getTitulo(), 
                                "" + (listaMidias.get(i).getQuant()), 
                                "" + listaMidias.get(i).getPreco_unit()});
                }
            }
        }catch(Exception erro){
            JOptionPane.showMessageDialog(this, "Erro: "+erro.getMessage(), "Salvar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jtfPesqKeyReleased

    private void jtTabMidiasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtTabMidiasMouseClicked
        try{
            int linha = jtTabMidias.getSelectedRow();
            if(linha>-1){
                jbAdicionar.setEnabled(true);
                jbRemover.setEnabled(true);
                jtfQuant.setEnabled(true);
                jtfQuant.requestFocus();
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jtTabMidiasMouseClicked

    private void jbAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarActionPerformed
        try{
            if(Integer.parseInt(jtfQuant.getText()) > 0 || !jtfQuant.equals("")){
                DefaultTableModel origem = (DefaultTableModel) jtTabMidias.getModel();
                int linha_selecionada = jtTabMidias.getSelectedRow();
                if(comparar()){
                    if(linha_selecionada > -1){
                        DefaultTableModel destino = (DefaultTableModel) jtItensCompra.getModel();
                        boolean flag = false;
                        ItensCompraModel obj_itens = new ItensCompraModel();
                        for(int i = 0; i<itens.size(); i++){
                            if(itens.get(i).getIdMidia() == Integer.parseInt((String) origem.getValueAt(linha_selecionada, 0))){
                                obj_itens.setIdCompra(idCompra);
                                obj_itens.setIdMidia(Integer.parseInt((String) origem.getValueAt(linha_selecionada, 0)));
                                obj_itens.setQuant(Integer.parseInt(jtfQuant.getText()) + Integer.parseInt((String)  destino.getValueAt(i, 2)));
                                obj_itens.setPreco(Double.parseDouble((String) origem.getValueAt(linha_selecionada, 3)));
                                obj_itens.setValorparcial(obj_itens.getQuant() * obj_itens.getPreco());
                                String[] tabela = {"" + obj_itens.getIdMidia(), 
                                    (String) origem.getValueAt(linha_selecionada, 1), "" + obj_itens.getQuant(), "" + obj_itens.getPreco(), "" + obj_itens.getValorparcial()};
                                destino.removeRow(i);
                                destino.addRow(tabela);
                                itens.remove(i);
                                itens.add(obj_itens);
                                flag = true;
                            }
                        }
                        if(flag == false){
                            obj_itens.setIdCompra(idCompra);
                            obj_itens.setIdMidia(Integer.parseInt((String) origem.getValueAt(linha_selecionada, 0)));
                            obj_itens.setQuant(Integer.parseInt(jtfQuant.getText()));
                            obj_itens.setPreco(Double.parseDouble((String) origem.getValueAt(linha_selecionada, 3)));
                            obj_itens.setValorparcial(obj_itens.getQuant() * obj_itens.getPreco());
                            destino.addRow(new String[]{"" + obj_itens.getIdMidia(), 
                                    (String) origem.getValueAt(linha_selecionada, 1), "" + obj_itens.getQuant(), "" + obj_itens.getPreco(), "" + obj_itens.getValorparcial()});
                        itens.add(obj_itens);
                        jbAdicionar.setEnabled(false);
                        }
                        Double valor_total = 0.0;
                        for(int j=0; j<itens.size(); j++){
                            valor_total += itens.get(j).getValorparcial();
                        }
                        jlValorParcial.setText("" + valor_total);
                        atualizaValTotal();
                        jtfPesq.setText("");
                        jtfQuant.setText("");
                        jcbFormapag.setEnabled(true);
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Quantidade maior do que existe do produto em estoque!");
                }
            }else{
                JOptionPane.showMessageDialog(this, "Informe a quantidade!");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbAdicionarActionPerformed

    private void jbVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVoltarActionPerformed
        try{
            if(JOptionPane.showConfirmDialog(this, "Deseja realmente voltar?\n"
                    + "Todas as alterações que não foram salvas serão excluidas!",  
                    "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                dispose();
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbVoltarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        try{
            if(JOptionPane.showConfirmDialog(this, "Deseja realmente excluir?",  
                    "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                CompraData DAO = new CompraData();
                if(DAO.excluir(this.idCompra)){
                    JOptionPane.showMessageDialog(this, "Excluido");
                    jbCancelarActionPerformed(evt);
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        limparTabelas();
        DefaultTableModel tabela = (DefaultTableModel) jtHistorico.getModel();
        while(jtHistorico.getRowCount() != 0)
            tabela.removeRow(0);
        iniciarTela();
        limparCampos();
        iniciarTabela();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverActionPerformed
        try{
            if(jtItensCompra.getSelectedRowCount() > 0){
                int linha = jtItensCompra.getSelectedRow();
                DefaultTableModel tabela = (DefaultTableModel) jtItensCompra.getModel();
                int idMidia = Integer.parseInt((String) tabela.getValueAt(linha, 0));
                tabela.removeRow(linha);
                for(int i=0; i<itens.size(); i++){
                    if(itens.get(i).getIdMidia() == idMidia){
                        for(ItensCompraModel item_inicial: itens_inicial){
                            if(itens.get(i).getIdMidia() == item_inicial.getIdMidia()){
                                if(JOptionPane.showConfirmDialog(this, "O item a ser removido da compra foi/será devolvido ao estoque? \n "
                                        + "Se sim, o item será automaticamente adicionado ao estoque!",  
                                    "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                                    ItensCompraModel item = new ItensCompraModel();
                                    item.setIdCompra(idCompra);
                                    item.setIdMidia(idMidia);
                                    item.setPreco(itens.get(i).getPreco());
                                    item.setQuant(itens.get(i).getQuant());
                                    item.setValorparcial(itens.get(i).getValorparcial());
                                    itens_removidos.add(item);
                                }
                            }
                        }
                        itens.remove(i);
                    }
                }
                Double valor_parcial = 0.0;
                for(ItensCompraModel item: itens)
                    valor_parcial += item.getValorparcial();
                jlValorParcial.setText("" + valor_parcial);
                Double desconto = Double.parseDouble(jtfDesconto.getText());
                Double valorparcial = Double.parseDouble(jlValorParcial.getText());
                JOptionPane.showMessageDialog(this, "Item removido com sucesso!");
                if(jtfDesconto.getText().length() >= 0 && desconto > valorparcial){
                    jtfDesconto.setText("0.00");
                    atualizaValTotal();
                    JOptionPane.showMessageDialog(this, "Verifique se haverá desconto!");
                }
                if(itens.isEmpty())
                    jcbFormapag.setEnabled(false);
            }else
                JOptionPane.showMessageDialog(this, "Selecione o item que deseja remover");
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbRemoverActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        jtTabMidias.setEnabled(true);
        jtfDesconto.setEnabled(true);
        jtItensCompra.setEnabled(true);
        jcbFormapag.setEnabled(true);
        jbExcluir.setEnabled(false);
        jbEditar.setEnabled(false);
        jbCancelar.setEnabled(true);
        jbSalvar.setEnabled(true);
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        try{
            if(validarCompra()){
                if(preencherObj()){
                    CompraData DAO = new CompraData();
                    if(DAO.salvar(obj, itens_removidos)){
                        JOptionPane.showMessageDialog(null, "Pedido finalizado com sucesso!");
                        jbCancelarActionPerformed(evt);
                    }   
                    else{
                        JOptionPane.showMessageDialog(null, "Erro ao finalizar a compra!");
                    }
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jcbFormapagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFormapagActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbFormapagActionPerformed

    private void jtfDescontoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfDescontoKeyReleased
        try{
            if(jtfDesconto.equals(","))
                JOptionPane.showMessageDialog(this, "Utilize o ponto ao invés da vírgula!");
        atualizaValTotal();
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }//GEN-LAST:event_jtfDescontoKeyReleased

    private void jtfDescontoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfDescontoMouseClicked
        jtfDesconto.setText("");
    }//GEN-LAST:event_jtfDescontoMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Desconto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAdicionar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbRemover;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JButton jbVoltar;
    private javax.swing.JComboBox<String> jcbFormapag;
    private javax.swing.JLabel jlFormapag;
    private javax.swing.JLabel jlPesq;
    private javax.swing.JLabel jlQuant;
    private javax.swing.JLabel jlValorParcial;
    private javax.swing.JLabel jlValorTotal;
    private javax.swing.JLabel jlValort;
    private javax.swing.JLabel jlValortp;
    private javax.swing.JTable jtHistorico;
    private javax.swing.JTable jtItensCompra;
    private javax.swing.JTable jtTabMidias;
    private javax.swing.JTextField jtfDesconto;
    private javax.swing.JTextField jtfPesq;
    private javax.swing.JTextField jtfQuant;
    // End of variables declaration//GEN-END:variables
    public static String formatDateUser(String data){  
         SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");  
         Date d1 = null;  
         try {  
             d1 = f.parse(data);              
         } catch (Exception e) {  
             e.printStackTrace();  
         }  
           
         SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");  
           
         data = format.format(d1);  
           
         return data;         
           
     } 
    
    public void setIdCliente(int idCliente){
        this.idCliente = idCliente;
    }
    
    public int getIdCliente(){
        return idCliente;
    }
    
    public void iniciarTabela(){
        try{
            DefaultTableModel tabela = (DefaultTableModel) jtHistorico.getModel();
            CompraData DAO = new CompraData();
            listaCompras = DAO.pesqHistorico(idCliente);
            nome_vendedores = DAO.pesqNomeVend(idCliente);
            for(int i=0;i <=(listaCompras.size() - 1);i++){
                tabela.addRow(new String[]{"" + listaCompras.get(i).getIdCompra(), 
                    "" + listaCompras.get(i).getIdFuncionario() + " / " + 
                    nome_vendedores.get(i), 
                    "" + formatDateUser(listaCompras.get(i).getData()) + "  " + listaCompras.get(i).getHora(),
                    "" + listaCompras.get(i).getDesconto(), 
                    "" + listaCompras.get(i).getValortotal(), 
                    "" + listaCompras.get(i).getFormapag()});
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }
    
    public void iniciarTela(){
        jtfPesq.setEnabled(false);
        jtfQuant.setEnabled(false);
        jbAdicionar.setEnabled(false);
        jbRemover.setEnabled(false);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        jbCancelar.setEnabled(false);
        jbSalvar.setEnabled(false);
        jcbFormapag.setEnabled(false);
        jtItensCompra.setEnabled(false);
        jtTabMidias.setEnabled(false);
        jtfDesconto.setEnabled(false);
    }
    
    public void limparCampos(){
        jtfPesq.setText("");
        jtfQuant.setText("");
        jlValorParcial.setText("0.00");
        jlValorTotal.setText("0.00");
        jtfDesconto.setText("0.00");
        jcbFormapag.setSelectedIndex(0);
    }
    
    public void limparTabelas(){
        DefaultTableModel tabmidia = (DefaultTableModel) jtTabMidias.getModel();
        DefaultTableModel tabitens = (DefaultTableModel) jtItensCompra.getModel();
        while(tabmidia.getRowCount() != 0)
            tabmidia.removeRow(0);
        while(tabitens.getRowCount() != 0)
            tabitens.removeRow(0);
    }

    public int getIdFunc() {
        return idFunc;
    }

    public void setIdFunc(int idFunc) {
        this.idFunc = idFunc;
    }
    
    public boolean comparar(){
        int linha = jtTabMidias.getSelectedRow();
        int quant = Integer.parseInt(jtfQuant.getText());
        DefaultTableModel tabmidias = (DefaultTableModel) jtTabMidias.getModel();
        DefaultTableModel tabitens = (DefaultTableModel) jtItensCompra.getModel();
        int idmidia = Integer.parseInt((String) tabmidias.getValueAt(linha, 0));
        int quant_midia = Integer.parseInt((String) tabmidias.getValueAt(linha, 2));
        for(int i=0; i<jtItensCompra.getRowCount(); i++){
            if(idmidia == Integer.parseInt((String) tabitens.getValueAt(i, 0))){
                int result = quant_midia - Integer.parseInt((String) tabitens.getValueAt(i, 2)) - quant;
                if(result < 0)
                    return false;
            }
        }
        if((quant_midia - quant) < 0)
            return false;
        return true;
    }
    
    public boolean validarCompra(){
        String msg = "";
        if(itens.isEmpty())
            msg += "Não existe nenhum item na compra! \n";
        if(jcbFormapag.getSelectedIndex() == 0)
            msg += "Selecione uma forma de pagamento \n";
        if(!jtfDesconto.getText().equals("") || !jtfDesconto.getText().equals("0.00")){
            if((Double.parseDouble(jtfDesconto.getText()) < 0))
                msg += "Verifique o desconto"; 
            if((Double.parseDouble(jtfDesconto.getText()) > Double.parseDouble(jlValorParcial.getText())))
                msg += "Verifique o desconto"; 
        }
        if(msg.isEmpty())
            return true;
        else
            JOptionPane.showMessageDialog(this, msg);
        return false;
    }
    
    public boolean preencherObj() throws Exception{
        obj.setIdCompra(this.idCompra);
        obj.setIdFuncionario(this.idFunc);
        obj.setValortotal(Double.parseDouble(jlValorTotal.getText()));
        obj.setFormapag(jcbFormapag.getSelectedItem().toString());
        obj.setItensCompra(itens);
        obj.setIdPessoa(idCliente);
        obj.setValortotal(Double.parseDouble(jlValorParcial.getText()));
        obj.setDesconto(Double.parseDouble(jtfDesconto.getText()));
        return true;
    }
    
    public boolean atualizarValTotal(){
        Double desconto = Double.parseDouble(jtfDesconto.getText());
        Double valorparcial = Double.parseDouble(jlValorParcial.getText());
        if(desconto > valorparcial){
            JOptionPane.showMessageDialog(this, "Desconto maior que o valor da compra!");
            jtfDesconto.setText("");
            atualizaValTotal();
            return true;
        }
        if(jtfDesconto.getText().equals("") || jtfDesconto.getText().equals("")){
            jlValorTotal.setText("" + Double.parseDouble(jlValorParcial.getText()));
            return true;
        }else{
            if(jtfDesconto.getText().length() >= 0 && desconto > 0 && desconto <= valorparcial){
                jlValorTotal.setText("" + (valorparcial - desconto));
                return true;
            }
        }
        return false;
    }
    
    public void atualizaValTotal(){
        Double desconto = Double.parseDouble(jtfDesconto.getText());
        Double valorparcial = Double.parseDouble(jlValorParcial.getText());
        if(desconto > valorparcial){
            JOptionPane.showMessageDialog(this, "Verifique o desconto");
            jtfDesconto.setText("");
            atualizaValTotal();
        }
        if(jtfDesconto.getText().equals("") || jtfDesconto.getText().equals("0.00")){
            jlValorTotal.setText("" + Double.parseDouble(jlValorParcial.getText()));
        }else{
            if(jtfDesconto.getText().length() >= 0 && desconto > 0 && desconto <= valorparcial){
                jlValorTotal.setText("" + (valorparcial - desconto));
            }
        }
    }
}
